package com.she.utils;

import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class RequestMapper {
	public RequestMapper() {
	}

	/**
	 * 주의 : GET으로 받아온 query string 처리에만 쓸 것(POST, PUT, PATCH는 VO를 생성하여 활용하길 권장)
	 * Web에서 받아온 query string을 Hashmap 으로 받아 HashMap <String, Object>로 다시 변환 하는 Method
	 * 이유는 배열형식의 query string 처리 때문인데(array[0]=1&array[1]=2) 이런 형식으로 들어오기 때문에
	 * 제대로 파라미터를 전달 받지 못하는 경우가 발생한다.
	 * 따라서, 올바른 파라미터 형식으로 변환한다.
	 * @param parameter
	 * @return HashMap <String, Object>
	 * @throws Exception
	 */
	public HashMap <String, Object> convertAsParameter(final HashMap<String, Object> parameter) throws Exception {
		HashMap <String, Object> convertedParameter = new HashMap <String, Object>();
		Iterator<String> iterator = parameter.keySet().iterator();
		String prevArrayKey = "";
		List<Object> objects = new ArrayList<Object>();
		String key = "";
		while (iterator.hasNext()) {
			key = (String) iterator.next();
			System.out.print("::::::::: convertAsParameter: " + key);
			System.out.println(", value: " + convertedParameter.get(key));
			String arrayKey = "";

			// 현재 정보가 배열인지 확인
			// 배열일 경우 key 값이 array[0], array[1].... 이런 형식으로 들어옴
			if (key.indexOf("[") > 0 && key.indexOf("]") > 0) {
				// 1. 배열 표시 문자([n])를 제거한 키 값 추출
				arrayKey = StringUtils.left(key, key.indexOf("["));

				// 2-1. 최초로 발견된 배열 이거나, 기존 배열과 동일할 경우에는 objects에 추가한다.
				if (prevArrayKey.equals("") || prevArrayKey.equals(arrayKey))
				{
					objects.add(parameter.get(key));
					System.out.println("add to " + arrayKey + " list : " + ":" + parameter.get(key));
				}
				// 2-2. 다른 배열일 경우 기존 object 정보를 map에 추가하고, 새로운 objects를 생성 후 현재 값을 넣는다.
				else {
					convertedParameter.put(prevArrayKey, objects);
					System.out.println("add list to map : " + prevArrayKey + ":" + parameter.get(key));

					objects = new ArrayList<>();
					objects.add(parameter.get(key));
					System.out.println("add to new " + arrayKey + " list : " + ":" + parameter.get(key));
				}

				prevArrayKey = arrayKey;
			} else {
				convertedParameter.put(key, parameter.get(key).toString());
			}
		}

		System.out.println("last Array " + prevArrayKey);

		// parameter의 마지막 요소가 배열이거나, 마지막으로 발견된 배열이 아직 map에 추가되지 않았다면 추가한다.
		if (!convertedParameter.containsKey(prevArrayKey)) {
			convertedParameter.put(prevArrayKey, objects);
			System.out.println("add list to map end : " + prevArrayKey);
		}
		return convertedParameter;
	}

	/**
	 * convertAsParameter 메써드를 통해 받아온 Hashmap의 Attribute인 object를 파라미터로 받아서
	 * Object List를 String 배열로 변환하는 함수
	 * @param object
	 * @return 변환된 String[]
	 * @throws Exception
	 */
	public String[] convertObjectListAsStringArray(Object object) throws Exception {
		if (object == null) return null;
		else if (object.toString().equals("")) return null;
		List<Object> objects = (List<Object>)object;
		String[] converted = objects.toArray(new String[0]);
		return converted;
	}

	/**
	 * convertAsParameter 메써드를 통해 받아온 Hashmap의 Attribute인 object를 파라미터로 받아서
	 * Object List를 int형 배열로 변환하는 함수
	 * @param object
	 * @return 변환된 int[]
	 * @throws Exception
	 */
	public int[] convertObjectListAsIntArray(Object object) throws Exception {
		if (object == null) return null;
		else if (object.toString().equals("")) return null;
		List<Object> objects = (List<Object>)object;

		int[] converted = new int[objects.size()];
		for(int i = 0; i < converted.length; i++)
		{
			converted[i] = Integer.parseInt(objects.get(i).toString());
		}
		return converted;
	}
}
